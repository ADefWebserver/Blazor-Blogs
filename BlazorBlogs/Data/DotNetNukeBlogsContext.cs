// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DotNetNukeBlogs.Data.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DotNetNukeBlogs.Data
{
    public partial class DotNetNukeBlogsContext : DbContext
    {
        public DotNetNukeBlogsContext()
        {
        }

        public DotNetNukeBlogsContext(DbContextOptions<DotNetNukeBlogsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BlogBlogs> BlogBlogs { get; set; }
        public virtual DbSet<BlogCategories> BlogCategories { get; set; }
        public virtual DbSet<BlogComments> BlogComments { get; set; }
        public virtual DbSet<BlogEntries> BlogEntries { get; set; }
        public virtual DbSet<BlogEntryCategories> BlogEntryCategories { get; set; }
        public virtual DbSet<BlogEntryTags> BlogEntryTags { get; set; }
        public virtual DbSet<BlogSettings> BlogSettings { get; set; }
        public virtual DbSet<BlogTags> BlogTags { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BlogBlogs>(entity =>
            {
                entity.HasKey(e => e.BlogId)
                    .HasName("PK_Blog_Blogs_BlogID");

                entity.ToTable("Blog_Blogs");

                entity.HasIndex(e => e.PortalId);

                entity.HasIndex(e => e.UserId);

                entity.Property(e => e.BlogId).HasColumnName("BlogID");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.Culture).HasMaxLength(10);

                entity.Property(e => e.DateFormat)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(1024);

                entity.Property(e => e.LastEntry).HasColumnType("datetime");

                entity.Property(e => e.ParentBlogId)
                    .HasColumnName("ParentBlogID")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.SyndicationEmail).HasMaxLength(255);

                entity.Property(e => e.SyndicationUrl)
                    .HasColumnName("SyndicationURL")
                    .HasMaxLength(1024);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<BlogCategories>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("Blog_Categories");

                entity.HasIndex(e => e.PortalId);

                entity.Property(e => e.CatId).HasColumnName("CatID");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.Slug)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<BlogComments>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("PK_Blog_Comments_CommentID");

                entity.ToTable("Blog_Comments");

                entity.HasIndex(e => e.EntryId);

                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Author).HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Website).HasMaxLength(255);

                entity.HasOne(d => d.Entry)
                    .WithMany(p => p.BlogComments)
                    .HasForeignKey(d => d.EntryId)
                    .HasConstraintName("FK_Blog_Comments");
            });

            modelBuilder.Entity<BlogEntries>(entity =>
            {
                entity.HasKey(e => e.EntryId)
                    .HasName("PK_Blog_Entries_EntryID");

                entity.ToTable("Blog_Entries");

                entity.HasIndex(e => e.AddedDate);

                entity.HasIndex(e => e.BlogId);

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.BlogId).HasColumnName("BlogID");

                entity.Property(e => e.Copyright).HasMaxLength(255);

                entity.Property(e => e.Description).HasColumnType("ntext");

                entity.Property(e => e.Entry)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PermaLink).HasMaxLength(1024);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<BlogEntryCategories>(entity =>
            {
                entity.HasKey(e => e.EntryCatId);

                entity.ToTable("Blog_Entry_Categories");

                entity.HasIndex(e => e.CatId);

                entity.HasIndex(e => e.EntryId);

                entity.Property(e => e.EntryCatId).HasColumnName("EntryCatID");

                entity.Property(e => e.CatId).HasColumnName("CatID");

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.HasOne(d => d.Cat)
                    .WithMany(p => p.BlogEntryCategories)
                    .HasForeignKey(d => d.CatId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Blog_Entry_Categories_Categories");

                entity.HasOne(d => d.Entry)
                    .WithMany(p => p.BlogEntryCategories)
                    .HasForeignKey(d => d.EntryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Blog_Entry_Categories_Entries");
            });

            modelBuilder.Entity<BlogEntryTags>(entity =>
            {
                entity.HasKey(e => e.EntryTagId);

                entity.ToTable("Blog_Entry_Tags");

                entity.HasIndex(e => e.EntryId);

                entity.HasIndex(e => e.TagId);

                entity.Property(e => e.EntryTagId).HasColumnName("EntryTagID");

                entity.Property(e => e.EntryId).HasColumnName("EntryID");

                entity.Property(e => e.TagId).HasColumnName("TagID");

                entity.HasOne(d => d.Entry)
                    .WithMany(p => p.BlogEntryTags)
                    .HasForeignKey(d => d.EntryId)
                    .HasConstraintName("FK_Blog_Entry_Tags_Entries");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.BlogEntryTags)
                    .HasForeignKey(d => d.TagId)
                    .HasConstraintName("FK_Blog_Entry_Tags_Tags");
            });

            modelBuilder.Entity<BlogSettings>(entity =>
            {
                entity.HasKey(e => new { e.PortalId, e.TabId, e.Key });

                entity.ToTable("Blog_Settings");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.TabId).HasColumnName("TabID");

                entity.Property(e => e.Key).HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(1024);
            });

            modelBuilder.Entity<BlogTags>(entity =>
            {
                entity.HasKey(e => e.TagId);

                entity.ToTable("Blog_Tags");

                entity.HasIndex(e => e.PortalId);

                entity.Property(e => e.TagId).HasColumnName("TagID");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.Slug)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}