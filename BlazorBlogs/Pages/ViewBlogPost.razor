@page "/ViewBlogPost/{BlogPostId}"

@using Microsoft.AspNetCore.Http
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@using static Toolbelt.Blazor.HeadElement.MetaElement
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GeneralSettingsService _GeneralSettingsService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject IHeadElementHelper HeadElementHelper
@inject DisqusState DisqusState
@inherits OwningComponentBase<BlogsService>

@if (SelectedBlog.BlogId != 0)
{
    <Title>@SelectedBlog.BlogTitle</Title>
    <Meta Property="og:url" Content="@AbsoluteUrlOfThisPage" />
    <Meta Property="og:title" Content="@SelectedBlog.BlogTitle" />
    <h4>
        <button type="button" class="btn btn-primary" @onclick="Back">[Back]</button>
        @if (UserIsAdminOfBlogPost)
        {
            <button type="button" class="btn btn-secondary" @onclick="EditBlog">[Edit Blog]</button>
        }
    </h4>
    <br />
    <i>@SelectedBlog.BlogDate.ToShortDateString()</i>
    <span><b>@SelectedBlog.BlogDisplayName</b></span>
    <div>
        <h1>@SelectedBlog.BlogTitle</h1>
    </div>
    <hr />
    <div>
        <div>
            @((MarkupString)SelectedBlog.BlogContent)
        </div>
    </div>
    <BlogAdministration @ref="BlogAdministrationControl" BlogUpdated="BlogUpdatedEvent" />
}
else
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string BlogPostId { get; set; }

    BlogDTO SelectedBlog = new BlogDTO() { BlogId = 0 };

    GeneralSettings objGeneralSettings = new GeneralSettings();

    BlogAdministration BlogAdministrationControl;
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    bool UserIsAdminOfBlogPost = false;
    string AbsoluteUrlOfThisPage => NavigationManager.ToAbsoluteUri($"/ViewBlogPost/{BlogPostId}").AbsoluteUri;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SelectedBlog = await @Service.GetBlogAsync(Convert.ToInt32(BlogPostId));
            await LogAction($"View Blog #{SelectedBlog.BlogId}");

            // Get the current user
            CurrentUser = (await authenticationStateTask).User;

            if (CurrentUser.Identity.IsAuthenticated)
            {
                if (CurrentUser.Identity.Name.ToLower() == SelectedBlog.BlogUserName.ToLower())
                {
                    UserIsAdminOfBlogPost = true;
                }
            }

            await HeadElementHelper.SetMetaElementsAsync(
            ByProp("og:description", SelectedBlog.BlogTitle),
            ByName("description", SelectedBlog.BlogTitle)
            );
        }
        catch
        {
            await LogAction($"Error Viewing Blog #{BlogPostId}");
            SelectedBlog = new BlogDTO() { BlogDate = DateTime.Now, BlogTitle = "ERROR - Page Not Found" };
        }
    }

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objGeneralSettings = await _GeneralSettingsService.GetGeneralSettingsAsync();

            if (Convert.ToBoolean(objGeneralSettings.DisqusEnabled))
            {
                string url = NavigationManager.ToAbsoluteUri($"/ViewBlogPost/{BlogPostId}").AbsoluteUri;

                await DisqusInterop.ResetDisqus(
                    JSRuntime,
                    BlogPostId.ToString(),
                    url,
                    SelectedBlog.BlogTitle);

                DisqusState.SetDisplayDisqus(true);
            }
        }
    }

    void EditBlog()
    {
        BlogAdministrationControl.EditBlog(SelectedBlog);
    }

    void Back()
    {
        NavigationManager.NavigateTo("/");
    }

    async Task BlogUpdatedEvent()
    {
        try
        {
            SelectedBlog = await @Service.GetBlogAsync(Convert.ToInt32(BlogPostId));
        }
        catch
        {
            // Blog was deleted
            Back();
        }
    }

    private async Task LogAction(string strAction)
    {
        // Get the current user
        var CurrentUser = (await authenticationStateTask).User;

        BlazorBlogs.Data.Models.Logs objLog = new Data.Models.Logs();
        objLog.LogDate = DateTime.Now;
        objLog.LogAction = strAction;
        objLog.LogUserName = (CurrentUser.Identity.Name != null) ? CurrentUser.Identity.Name : "";
        objLog.LogIpaddress = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();

        var result = await @Service.CreateLogAsync(objLog);
    }
}
