@page "/ViewBlogPost/{BlogPostId}"

@using Microsoft.AspNetCore.Http
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor httpContextAccessor
@inherits OwningComponentBase<BlogsService>

<a href="/"><h4>[Back]</h4></a>
<br />
<i>@SelectedBlog.BlogDate.ToShortDateString()</i>
<span><b>@SelectedBlog.BlogUserName</b></span>
<div>
    <h1>@SelectedBlog.BlogTitle</h1>
</div>
<hr />
<div>
    <div>
        @((MarkupString)SelectedBlog.BlogContent)
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string BlogPostId { get; set; }

    Blogs SelectedBlog = new Blogs();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SelectedBlog = await @Service.GetBlogAsync(Convert.ToInt32(BlogPostId));
            await LogAction($"View Blog #{SelectedBlog.BlogId}");
        }
        catch
        {
            await LogAction($"Error Viewing Blog #{BlogPostId}");
            SelectedBlog = new Blogs() { BlogDate = DateTime.Now, BlogTitle = "ERROR - Page Not Found" };
        }
    }

    private async Task LogAction(string strAction)
    {
        // Get the current user
        var CurrentUser = (await authenticationStateTask).User;

        BlazorBlogs.Data.Models.Logs objLog = new Data.Models.Logs();
        objLog.LogDate = DateTime.Now;
        objLog.LogAction = strAction;
        objLog.LogUserName = (CurrentUser.Identity.Name != null) ? CurrentUser.Identity.Name : "";
        objLog.LogIpaddress = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();

        var result = await @Service.CreateLogAsync(objLog);
    }
}
