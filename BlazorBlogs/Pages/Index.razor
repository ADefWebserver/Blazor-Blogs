@page "/"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity;
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration _configuration
@inject IHttpContextAccessor httpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access BlogsService using @Service
*@
@inherits OwningComponentBase<BlogsService>
<!-- Show the blogs -->

@foreach (var blog in colBlogs.Blogs)
{
    <a href="/ViewBlogPost/@blog.BlogId"><h2>@blog.BlogDate.ToShortDateString() - @blog.BlogTitle</h2></a>
    <div class="form-group">
        @((MarkupString)blog.BlogSummary)
    </div>
    <hr />
}
<br />
<button class="btn btn-warning"
        @onclick="Previous">
    <b>&#x3C;</b>
</button>
@if (ShowNextButton)
{
    <button class="btn btn-warning"
            @onclick="Next">
        <b>&#x3E;</b>
    </button>
}
<br />
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    int CurrentPage = 1;
    BlogsPaged colBlogs =
        new BlogsPaged()
        {
            Blogs = new List<Blogs>(),
            BlogCount = 0
        };

    bool ShowNextButton
    {
        get
        {
            return (
                (colBlogs.BlogCount > (CurrentPage * 5))
                );
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        // Ensure there is a user who is an Administrator
        string strAdministratorUserName = _configuration["AdministratorUserName"];
        string strAdministratorPassword = _configuration["AdministratorPassword"];

        var user = await _UserManager.FindByNameAsync(strAdministratorUserName);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

        // We access BlogsService using @Service
        colBlogs = await @Service.GetBlogsAsync(CurrentPage);
    }

    async Task Previous()
    {
        if (CurrentPage > 1)
        {
            CurrentPage = CurrentPage - 1;
            colBlogs = await @Service.GetBlogsAsync(CurrentPage);
        }
    }

    async Task Next()
    {
        CurrentPage = CurrentPage + 1;
        colBlogs = await @Service.GetBlogsAsync(CurrentPage);
    }
}