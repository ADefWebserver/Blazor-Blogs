@page "/"
@page "/CategorySearch/{CategoryId}"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity;
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration _configuration
@inject IHttpContextAccessor httpContextAccessor
@inherits OwningComponentBase<BlogsService>
<RadzenDropDown AllowClear="true"
                AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                @bind-Value="selectedBlogCategory" Multiple="false"
                Placeholder="Search Category..."
                Data="@colCategorys" TextProperty="Title"
                ValueProperty="CategoryId"
                Style="width:400px;"
                Change="@(args => ChangeCategory(args, "DropDown"))" />
<br />
<br />
<!-- Show the blogs -->
@if (UserIsAnAdmin)
{
    <button type="button" class="btn btn-primary" @onclick="NewBlog">[New Blog]</button>
    <br />
    <br />
}
@if (colBlogs.Blogs.Count == 0)
{
    <h2>No items returned</h2>
}
else
{
    @foreach (var blog in colBlogs.Blogs)
    {
        <a href="/ViewBlogPost/@blog.BlogId"><h2>@blog.BlogDate.ToShortDateString() - @blog.BlogTitle</h2></a>
        <div class="form-group">
            @((MarkupString)blog.BlogSummary)
        </div>
        <hr />
    }
}
<br />
<BlogAdministration @ref="BlogAdministrationControl" BlogUpdated="BlogUpdatedEvent" />
@if (ShowPreviousButton)
{
    <button class="btn btn-warning"
            @onclick="Previous">
        <b>&#x3C;</b>
    </button>
}
@if (ShowNextButton)
{
    <button class="btn btn-warning"
            @onclick="Next">
        <b>&#x3E;</b>
    </button>
}
<br />
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string CategoryId { get; set; }

    BlogAdministration BlogAdministrationControl;

    string ADMINISTRATION_ROLE = "Administrators";
    string selectedBlogCategory = "";
    List<CategoryDTO> colCategorys = new List<CategoryDTO>();

    int CurrentPage = 1;

    BlogsPaged colBlogs =
        new BlogsPaged()
        {
            Blogs = new List<Blogs>(),
            BlogCount = 0
        };

    bool ShowPreviousButton
    {
        get
        {
            return (CurrentPage > 1);
        }
    }

    bool ShowNextButton
    {
        get
        {
            return (
                (colBlogs.BlogCount > (CurrentPage * 5))
                );
        }
    }

    bool UserIsAnAdmin = false;
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        // Ensure there is a user who is an Administrator
        string strAdministratorUserName = _configuration["AdministratorUserName"];
        string strAdministratorPassword = _configuration["AdministratorPassword"];

        var user = await _UserManager.FindByNameAsync(strAdministratorUserName);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

        // Get the current user
        CurrentUser = (await authenticationStateTask).User;

        if (CurrentUser.Identity.IsAuthenticated)
        {
            // Is user an administrator?
            UserIsAnAdmin = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
        }

        colCategorys = await @Service.GetCategorysAsync();

        // We access BlogsService using @Service
        colBlogs = await @Service.GetBlogsAsync(CurrentPage, 0);
    }

    void NewBlog()
    {
        BlogAdministrationControl.AddNewBlog();
    }

    async Task BlogUpdatedEvent()
    {
        colBlogs = await @Service.GetBlogsAsync(CurrentPage, 0);
    }

    async Task ChangeCategory(object value, string name)
    {
        CurrentPage = 1;
        int intCategoryID = Convert.ToInt32(value);
        colBlogs = await @Service.GetBlogsAsync(CurrentPage, intCategoryID);
    }

    async Task Previous()
    {
        if (CurrentPage > 1)
        {
            CurrentPage = CurrentPage - 1;
            colBlogs = await @Service.GetBlogsAsync(CurrentPage, 0);
        }
    }

    async Task Next()
    {
        CurrentPage = CurrentPage + 1;
        colBlogs = await @Service.GetBlogsAsync(CurrentPage, 0);
    }
}