@page "/"
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity;
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration _configuration
@inject IHttpContextAccessor httpContextAccessor
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access BlogsService using @Service
*@
@inherits OwningComponentBase<BlogsService>
<!-- Show the blogs -->

@foreach (var blog in colBlogs.Blogs)
{
    <button class="btn btn-link"
            @onclick="(() => ViewBlog(blog))">
        <h2>@blog.BlogDate.ToShortDateString() - @blog.BlogTitle</h2>
    </button>
    <div class="form-group">
        @((MarkupString)blog.BlogSummary)
    </div>
    <hr />
}
<br />
<button class="btn btn-warning"
        @onclick="Previous">
    <b>&#x3C;</b>
</button>
@if (ShowNextButton)
{
    <button class="btn btn-warning"
            @onclick="Next">
        <b>&#x3E;</b>
    </button>
}
@if (ShowPopup)
{
    <!-- This is the popup to view the selected Blog -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog-scrollable modal-dialog-centered">
            <div class="modal-content">
                <i>@SelectedBlog.BlogDate.ToShortDateString()</i>
                <div class="modal-header">
                    <h3 class="modal-title">@SelectedBlog.BlogTitle</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        @((MarkupString)SelectedBlog.BlogContent)
                    </div>
                    <br /><br />
                </div>
            </div>
        </div>
    </div>
}
<br />
<br />
@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    int CurrentPage = 1;
    BlogsPaged colBlogs =
        new BlogsPaged()
        {
            Blogs = new List<Blogs>(),
            BlogCount = 0
        };

    Blogs SelectedBlog;
    bool ShowPopup = false;
    bool ShowNextButton
    {
        get
        {
            return (
                (colBlogs.BlogCount > (CurrentPage * 5))
                );
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        // Ensure there is a user who is an Administrator
        string strAdministratorUserName = _configuration["AdministratorUserName"];
        string strAdministratorPassword = _configuration["AdministratorPassword"];

        var user = await _UserManager.FindByNameAsync(strAdministratorUserName);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }

        // We access BlogsService using @Service
        colBlogs = await @Service.GetBlogsAsync(CurrentPage);
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    async Task ViewBlog(Blogs Blog)
    {
        // Set the selected Blog
        // as the current Blog
        SelectedBlog = Blog;

        // Open the Popup
        ShowPopup = true;

        await LogAction($"View Blog #{Blog.BlogId}");
    }

    async Task Previous()
    {
        if (CurrentPage > 1)
        {
            CurrentPage = CurrentPage - 1;
            colBlogs = await @Service.GetBlogsAsync(CurrentPage);
        }
    }

    async Task Next()
    {
        CurrentPage = CurrentPage + 1;
        colBlogs = await @Service.GetBlogsAsync(CurrentPage);
    }

    private async Task LogAction(string strAction)
    {
        // Get the current user
        var CurrentUser = (await authenticationStateTask).User;

        BlazorBlogs.Data.Models.Logs objLog = new Data.Models.Logs();
        objLog.LogDate = DateTime.Now;
        objLog.LogAction = strAction;
        objLog.LogUserName = (CurrentUser.Identity != null) ? CurrentUser.Identity.Name : "";
        objLog.LogIpaddress = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();

        var result = await @Service.CreateLogAsync(objLog);
    }
}