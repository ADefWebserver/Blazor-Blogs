@page "/importblogs"
@using System.Text;
@using System.Security.Claims;
@using BlazorBlogs.Data;
@using Microsoft.AspNetCore.Hosting;
@using BlazorBlogsLibrary.Classes;
@using BlazorBlogsLibrary.Classes.Imports;
@using DotNetNukeBlogs.Data;
@using DotNetNukeBlogs.Data.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration _configuration
@inject GeneralSettingsService _GeneralSettingsService
@inject BlogsService _BlogsService
@inject IWebHostEnvironment _IWebHostEnvironment
@inject NavigationManager NavigationManager
@inherits OwningComponentBase
<AuthorizeView>
    <Authorized>
        <h1>Import Blogs</h1>
        <p>Works with: <a href="https://github.com/DNNCommunity/DNN.Blog">DotNetNuke Blog</a></p>
        <br />
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <!-- Connection Selection -->
            <h4>Source</h4>
            <RadzenDropDown AllowClear="false"
                            AllowFiltering="false"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="SelectedConnection" Multiple="false"
                            Placeholder="Select Connection..."
                            Data="@ColExternalConnections" TextProperty="ConnectionName"
                            Style="width:500px;"
                            Change="@(args => ChangeConnection(args, "DropDown"))" />
            <br />
            @if (SelectedConnection != null)
            {
                <button class="btn btn-primary"
                        @onclick="(() => EditConnection())">
                    Edit
                </button>
            }
            <button class="btn btn-success"
                    @onclick="(() => NewConnection())">
                New Connection
            </button>
            <br /><br />
            <!-- Blog Selection -->
            @if (SelectedConnection != null)
            {
                <h4>Blog</h4>
                @if (ShowProgressBar)
                {
                    <div style="max-width: 500px;">
                        <RadzenProgressBar Value="100" ShowValue="false"
                                           Mode="ProgressBarMode.Indeterminate"
                                           Style="width: 500px;" />
                    </div>
                }
                else
                {
                    <RadzenDropDown AllowClear="false"
                                    AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="SelectedBlogEntry" Multiple="false"
                                    Placeholder="Select Blog..."
                                    Data="@ColBlogEntries" TextProperty="Title"
                                    Style="width:500px;" />
                }
            }
            <!-- Connection Popup -->
            <ImportBlogsDatabaseConfiguration @ref="@objImportBlogsDatabaseConfiguration"
                                              paramConnectionSetting="@objConnectionSetting"
                                              DatabaseConfigurationChanged="@DatabaseConfigurationComplete" />
        }
    </Authorized>
    <NotAuthorized>
        <h3>Administration</h3>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ImportBlogsDatabaseConfiguration objImportBlogsDatabaseConfiguration;
    DTOConnectionSetting objConnectionSetting = new DTOConnectionSetting();

    string ADMINISTRATION_ROLE = "Administrators";

    List<ExternalConnectionsDTO> ColExternalConnections = new List<ExternalConnectionsDTO>();
    ExternalConnectionsDTO SelectedConnection;

    List<BlogEntries> ColBlogEntries = new List<BlogEntries>();
    BlogEntries SelectedBlogEntry;

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    private bool ShowProgressBar = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        _GeneralSettingsService = (GeneralSettingsService)ScopedServices.GetService(typeof(GeneralSettingsService));
        _BlogsService = (BlogsService)ScopedServices.GetService(typeof(BlogsService));

        await RefreshConnectionsAsync(null);
    }

    private async Task RefreshConnectionsAsync(int? SelectedConnectionId)
    {
        ColExternalConnections = await _BlogsService.GetExternalConnectionsAsync();

        if (SelectedConnectionId != null)
        {
            if (ColExternalConnections.Count > 0)
            {
                SelectedConnection = ColExternalConnections.FirstOrDefault();
                StateHasChanged();
            }
        }
        else
        {
            SelectedConnection = ColExternalConnections.Where(x => x.Id == SelectedConnectionId).FirstOrDefault();
        }
    }

    public async Task DatabaseConfigurationComplete(DTOConnectionSetting paramConnectionSetting)
    {
        if (paramConnectionSetting.ConnectionState == ConnectionState.Add)
        {
            SelectedConnection = new ExternalConnectionsDTO();

            SelectedConnection.DatabaseName = paramConnectionSetting.DatabaseName;
            SelectedConnection.ServerName = paramConnectionSetting.ServerName;
            SelectedConnection.IntegratedSecurity = paramConnectionSetting.IntegratedSecurity.ToString();
            SelectedConnection.DatabaseUsername = paramConnectionSetting.Username;
            SelectedConnection.DatabasePassword = paramConnectionSetting.Password;

            var result = await _BlogsService.CreateExternalConnectionsAsync(SelectedConnection);
            await RefreshConnectionsAsync(result.Id);
        }

        if (paramConnectionSetting.ConnectionState == ConnectionState.Update)
        {
            SelectedConnection.DatabaseName = paramConnectionSetting.DatabaseName;
            SelectedConnection.ServerName = paramConnectionSetting.ServerName;
            SelectedConnection.IntegratedSecurity = paramConnectionSetting.IntegratedSecurity.ToString();
            SelectedConnection.DatabaseUsername = paramConnectionSetting.Username;
            SelectedConnection.DatabasePassword = paramConnectionSetting.Password;

            await _BlogsService.UpdateExternalConnectionsAsync(SelectedConnection);
            await RefreshConnectionsAsync(SelectedConnection.Id);
        }

        if (paramConnectionSetting.ConnectionState == ConnectionState.Delete)
        {
            await _BlogsService.DeleteExternalConnectionsAsync(SelectedConnection);
            SelectedConnection = new ExternalConnectionsDTO();
            await RefreshConnectionsAsync(null);
        }
    }

    async Task ChangeConnection(object value, string name)
    {
        ColBlogEntries = new List<BlogEntries>();
        ShowProgressBar = true;
        StateHasChanged();

        var optionsBuilder = new DbContextOptionsBuilder<DotNetNukeBlogsContext>();
        optionsBuilder.UseSqlServer(CreateDatabaseConnectionString(SelectedConnection));

        using (var context = new DotNetNukeBlogsContext(optionsBuilder.Options))
        {
            ColBlogEntries = await context.BlogEntries.ToListAsync();

            if (ColBlogEntries.Count > 0)
            {
                SelectedBlogEntry = ColBlogEntries.FirstOrDefault();
            }
        }

        ShowProgressBar = false;
        StateHasChanged();
    }

    void EditConnection()
    {
        if (SelectedConnection != null)
        {
            objConnectionSetting.DatabaseName = SelectedConnection.DatabaseName;
            objConnectionSetting.ServerName = SelectedConnection.ServerName;
            objConnectionSetting.IntegratedSecurity = Convert.ToBoolean(SelectedConnection.IntegratedSecurity);
            objConnectionSetting.Username = SelectedConnection.DatabaseUsername;
            objConnectionSetting.Password = SelectedConnection.DatabasePassword;
            objConnectionSetting.ConnectionState = ConnectionState.Update;

            objImportBlogsDatabaseConfiguration.setConnectionParameter(objConnectionSetting);
        }
    }

    void NewConnection()
    {
        objConnectionSetting.DatabaseName = "DotNetNuke";
        objConnectionSetting.ServerName = "(Local)";
        objConnectionSetting.IntegratedSecurity = true;
        objConnectionSetting.Username = "";
        objConnectionSetting.Password = "";
        objConnectionSetting.ConnectionState = ConnectionState.Add;

        objImportBlogsDatabaseConfiguration.setConnectionParameter(objConnectionSetting);
    }

    // Utility

    #region private string CreateDatabaseConnectionString(ExternalConnectionsDTO objConnectionSetting)
    private string CreateDatabaseConnectionString(ExternalConnectionsDTO objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!Convert.ToBoolean(objConnectionSetting.IntegratedSecurity)) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.DatabaseUsername,
            objConnectionSetting.DatabasePassword) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3}",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion
}