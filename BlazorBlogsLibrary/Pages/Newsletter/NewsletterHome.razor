@page "/newsletter"
@using System.IO;
@using System.Text;
@using System.Web;
@using System.Security.Claims;
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@using Microsoft.AspNetCore.Hosting;
@using BlazorBlogsLibrary.Classes;
@using BlazorBlogsLibrary.Classes.Imports;
@using DotNetNukeBlogs.Data;
@using DotNetNukeBlogs.Data.Models;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Configuration;
@inject IConfiguration _configuration
@inject GeneralSettingsService _GeneralSettingsService
@inject BlogsService _BlogsService
@inject IWebHostEnvironment _IWebHostEnvironment
@inject NavigationManager NavigationManager
@inherits OwningComponentBase
<AuthorizeView>
    <Authorized>
        <p style="color:red;">@error</p>
        <h1>Newsletters</h1>
        <br />
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            @if (!LoadingBlogs)
            {
                <button class="btn btn-primary"
                @onclick="(() => CreateNewsletter())">
                    Create Newsletter
                </button>

                @if (colNewsletters.Count() > 0)
                {
                    <br/><br/>
                    <b>Newsletters:</b> <RadzenDropDown AllowClear="false"
                                    AllowFiltering="false"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="SelectedNewsletter" Multiple="false"
                                    Placeholder="Select Newsletter..."
                                    Data="@colNewsletters" TextProperty="BlogTitle"
                                    Change="@(args => ChangeNewsletter(args, "DropDown"))"
                                    Style="width:500px;" />
                    <button type="button" class="btn btn-secondary" @onclick="EditNewsletter">Edit Newsletter</button>

                    <span>&nbsp;&nbsp;</span>
                    <button class="btn btn-success" @onclick="CreateCampain">Create Campain</button>
                }

                @if (colNewslettersCampains.Count() > 0)
                {
                    <br /><br />
                    <b>Campains:</b> <RadzenDropDown AllowClear="false"
                                    AllowFiltering="false"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    @bind-Value="SelectedNewslettersCampains" Multiple="false"
                                    Placeholder="Select Campain..."
                                    Data="@colNewslettersCampains" TextProperty="NewsletterCampainName"
                                    Style="width:500px;" />
                    <button type="button" class="btn btn-secondary" @onclick="EditCampain">Edit Campain</button>
                }

                <NewsletterEdit @ref="NewsletterEditControl" NewsletterUpdated="NewsletterUpdatedEvent" />

            }
            else
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
            }
        }
    </Authorized>
    <NotAuthorized>
        <h3>Administration</h3>
        <p>You are not logged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    string error = "";

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();

    bool LoadingBlogs = false;
    BlogDTO SelectedNewsletter = new BlogDTO() { BlogId = 0, BlogDate = DateTime.Now, BlogTitle = "", BlogDisplayName = "" };
    NewslettersCampain SelectedNewslettersCampains = new NewslettersCampain();
    NewsletterEdit NewsletterEditControl;
    List<BlogDTO> colNewsletters = new List<BlogDTO>();
    List<NewslettersCampain> colNewslettersCampains = new List<NewslettersCampain>();

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        _GeneralSettingsService = (GeneralSettingsService)ScopedServices.GetService(typeof(GeneralSettingsService));
        _BlogsService = (BlogsService)ScopedServices.GetService(typeof(BlogsService));

        colNewsletters = await _BlogsService.GetNewslettersAsync();

        if (colNewsletters != null)
        {
            if (colNewsletters.Count() > 0)
            {
                SelectedNewsletter = colNewsletters[0];
            }
        }
    }

    void CreateNewsletter()
    {
        NewsletterEditControl.AddNewBlog();
    }

    void EditNewsletter()
    {
        NewsletterEditControl.EditBlog(SelectedNewsletter);
    }

    async Task NewsletterUpdatedEvent()
    {
        LoadingBlogs = true;
        StateHasChanged();

        colNewsletters = await _BlogsService.GetNewslettersAsync();

        if (colNewsletters != null)
        {
            if (colNewsletters.Count() > 0)
            {
                SelectedNewsletter = colNewsletters[0];
            }
        }

        LoadingBlogs = false;
        StateHasChanged();
    }

    async Task ChangeNewsletter(object value, string name)
    {
        error = "";
        colNewslettersCampains = await _BlogsService.GetCampainsAsync(SelectedNewsletter.BlogId);
        StateHasChanged();
    }

    async Task CreateCampain()
    {
        LoadingBlogs = true;
        StateHasChanged();

        // Create Campain
        await _BlogsService.CreateCampainsAsync(SelectedNewsletter);

        // Refresh list
        colNewslettersCampains = await _BlogsService.GetCampainsAsync(SelectedNewsletter.BlogId);

        LoadingBlogs = false;
        StateHasChanged();
    }

    private void EditCampain()
    {
        
    }

    // Utility

    #region private string FixImages(string domain, string content)
    private string FixImages(string domain, string content)
    {
        if (content != null)
        {
            content = content.Replace(@"src=&quot;/", @$"src=&quot;{domain}/");
            content = content.Replace(@"src=""", @$"src=""{domain}");
        }
        return content;
    }
    #endregion

    #region private string HtmlDecode(string param)
    private string HtmlDecode(string param)
    {
        StringWriter myWriter = new StringWriter();

        // Decode the encoded string.
        HttpUtility.HtmlDecode(param, myWriter);
        return myWriter.ToString();
    }
    #endregion

    #region ConvertToText
    public static string ConvertToText(string sHTML)
    {
        string sContent = sHTML;
        sContent = sContent.Replace("<br />", Environment.NewLine);
        sContent = sContent.Replace("<br>", Environment.NewLine);
        sContent = FormatText(sContent, true);
        return StripTags(sContent, true);
    }
    #endregion

    #region FormatText
    public static string FormatText(string HTML, bool RetainSpace)
    {
        //Match all variants of <br> tag (<br>, <BR>, <br/>, including embedded space
        string brMatch = "\\s*<\\s*[bB][rR]\\s*/\\s*>\\s*";
        //Replace Tags by replacement String and return mofified string
        return System.Text.RegularExpressions.Regex.Replace(HTML, brMatch, Environment.NewLine);
    }
    #endregion

    #region StripTags
    public static string StripTags(string HTML, bool RetainSpace)
    {
        //Set up Replacement String
        string RepString;
        if (RetainSpace)
        {
            RepString = " ";
        }
        else
        {
            RepString = "";
        }

        //Replace Tags by replacement String and return mofified string
        return System.Text.RegularExpressions.Regex.Replace(HTML, "<[^>]*>", RepString);
    }
    #endregion
}