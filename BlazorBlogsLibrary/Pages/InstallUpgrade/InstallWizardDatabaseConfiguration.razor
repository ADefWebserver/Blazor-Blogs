@using System.Text;
@using Microsoft.Extensions.Options;
@using System.Security.Claims;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.AspNetCore.Hosting;
@using BlazorBlogs.Data;
@using Microsoft.EntityFrameworkCore;
@inject InstallUpdateState _InstallUpdateState
@inject IOptions<ConnectionStrings> ConnectionStrings
@inject IWritableOptions<ConnectionStrings> connectionString
@inject IConfiguration configRoot
@inject IWebHostEnvironment hostEnvironment
@inject BlazorBlogsContext context
@inject GeneralSettingsService _GeneralSettingsService
@inject NavigationManager NavigationManager

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Server: </label>
            </td>
            <td>
                <input type="text" id="ServerName" class="form-control" @bind="ServerName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Database: </label>
            </td>
            <td>
                <input type="text" id="DatabaseName" class="form-control" @bind="DatabaseName" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="Title" class="control-label" style="font-weight: bold">Integrated Security: </label>
            </td>
            <td>
                <select class="form-control"
                        @bind="IntegratedSecurityDisplay">
                    @foreach (var option in OptionsTrueFalse)
                    {
                        <option value="@option">
                            @option
                        </option>
                    }
                </select>
            </td>
        </tr>
        @if (IntegratedSecurityDisplay == "False")
        {
            <tr>
                <td>
                    <label for="Title" class="control-label" style="font-weight: bold">Database Username: </label>
                </td>
                <td>
                    <input type="text" id="DatabaseUsername" class="form-control" @bind="DatabaseUsername" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="Title" class="control-label" style="font-weight: bold">Database Password: </label>
                </td>
                <td>
                    <input type="password" id="DatabasePassword" class="form-control" @bind="DatabasePassword" />
                </td>
            </tr>
        }
    </tbody>
</table>

<table class="form-group" cellpadding="4" cellspacing="4">
    <tbody>
        <tr>
            <td>
                &nbsp;
            </td>
            <td>
                @if (boolProcessing == false)
                {
                    <button type="button" label="Set Database Connection"
                            class="btn btn-success"
                            @onclick="setConnection">
                        Set Connection
                    </button>
                }
                else
                {
                    <span>Processing...</span>
                }
            </td>
        </tr>
    </tbody>
</table>
@strStatusMessage

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();

    private DTOConnectionSetting connectionSetting = new DTOConnectionSetting();
    string IntegratedSecurityDisplay = "False";
    List<string> OptionsTrueFalse = new List<string>() { "True", "False" };
    string strStatusMessage = "";
    bool boolProcessing = false;

    private string DatabaseName = "BlazorBlogs";
    private string ServerName = "(local)";
    private string DatabaseUsername = "TestDatabaseUser";
    private string DatabasePassword = "password";

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        CurrentUser = (await authenticationStateTask).User;

        try
        {
            var settings = await
                _GeneralSettingsService.GetGeneralSettingsAsync();

            // If we can connect then do not proceed
            NavigationManager.NavigateTo("/", true);
        }
        catch
        {
            // Allow install to proceed
        }
    }

    private void setConnection()
    {
        boolProcessing = true;
        strStatusMessage = "";

        connectionSetting.DatabaseName = DatabaseName;
        connectionSetting.IntegratedSecurity = Convert.ToBoolean(IntegratedSecurityDisplay);
        connectionSetting.Password = DatabasePassword;
        connectionSetting.ServerName = ServerName;
        connectionSetting.Username = DatabaseUsername;

        var result = SetConnectionSetting(connectionSetting);

        if (result.Success)
        {
            //await InstallationState.InvokeAsync("InstallationScripts");
        }
        else
        {
            strStatusMessage = result.StatusMessage;
        }

        boolProcessing = false;
    }

    #region public DTOStatus SetConnectionSetting(DTOConnectionSetting objConnectionSetting)
    public DTOStatus SetConnectionSetting(DTOConnectionSetting objConnectionSetting)
    {
        // The return message
        DTOStatus objDTOStatus = new DTOStatus();
        objDTOStatus.Success = true;

        // Create a Database connection string
        string strConnectionString = CreateDatabaseConnectionString(objConnectionSetting);

        // Test the database connection string
        if (DatabaseConnectionValid(strConnectionString))
        {
            try
            {
                // Update the appsettings.json file
                UpdateDatabaseConnectionString(strConnectionString);
            }
            catch (Exception ex)
            {
                // appsettings.json file update error
                objDTOStatus.Success = false;
                objDTOStatus.StatusMessage = ex.GetBaseException().Message;
            }
        }
        else
        {
            // Bad connection setting
            objDTOStatus.Success = false;
            objDTOStatus.StatusMessage = "Connection settings are not valid";
        }

        // Return the result
        return objDTOStatus;
    }
    #endregion

    #region private bool DatabaseConnectionValid(string strConnectionString)
    private bool DatabaseConnectionValid(string strConnectionString)
    {
        bool boolDatabaseConnectionValid = false;

        // Try to connect to the database
        var optionsBuilder = new DbContextOptionsBuilder<BlazorBlogsContext>();
        optionsBuilder.UseSqlServer(strConnectionString);

        using (var context = new BlazorBlogsContext(optionsBuilder.Options))
        {
            boolDatabaseConnectionValid = context.Database.CanConnect();
        }

        return boolDatabaseConnectionValid;
    }
    #endregion

    #region private string UpdateDatabaseConnectionString(string strConnectionString)
    private string UpdateDatabaseConnectionString(string strConnectionString)
    {
        // Update DefaultConnection in the appsettings.json file
        connectionString.Update(opt =>
        {
            opt.DefaultConnection = strConnectionString + ";Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
        });

        // *********************************
        // Reload configuration
        ReloadConfiguration();

        return strConnectionString;
    }
    #endregion

    #region private string CreateDatabaseConnectionString(DTOConnectionSetting objConnectionSetting)
    private string CreateDatabaseConnectionString(DTOConnectionSetting objConnectionSetting)
    {
        StringBuilder SB = new StringBuilder();
        string strConnectionString = "";

        string strUserInfo = (!objConnectionSetting.IntegratedSecurity) ?
            String.Format("uid={0};pwd={1}",
            objConnectionSetting.Username,
            objConnectionSetting.Password) :
            "integrated security=True";

        strConnectionString = String.Format("{0}data source={1};initial catalog={2};{3}",
            SB.ToString(),
            objConnectionSetting.ServerName,
            objConnectionSetting.DatabaseName,
            strUserInfo);

        return strConnectionString;
    }
    #endregion

    #region private void ReloadConfiguration()
    private void ReloadConfiguration()
    {
        string WebConfigOrginalFileNameAndPath = hostEnvironment.ContentRootPath + @"\Web.config";
        string WebConfigTempFileNameAndPath = hostEnvironment.ContentRootPath + @"\Web.config.txt";

        if (System.IO.File.Exists(WebConfigOrginalFileNameAndPath))
        {
            // Temporarily rename the web.config file
            // to release the locks on any assemblies
            System.IO.File.Copy(WebConfigOrginalFileNameAndPath, WebConfigTempFileNameAndPath);
            System.IO.File.Delete(WebConfigOrginalFileNameAndPath);

            // Give the site time to release locks on the assemblies
            Task.Delay(2000).Wait(); // Wait 2 seconds with blocking

            // Rename the temp web.config file back to web.config
            // so the site will be active again
            System.IO.File.Copy(WebConfigTempFileNameAndPath, WebConfigOrginalFileNameAndPath);
            System.IO.File.Delete(WebConfigTempFileNameAndPath);
        }
    }
    #endregion

    // Classes

    public class ConnectionSetting
    {
        public string DatabaseName { get; set; }
        public string ServerName { get; set; }
        public bool IntegratedSecurity { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class DTOConnectionSetting
    {
        public string DatabaseName { get; set; }
        public string ServerName { get; set; }
        public bool IntegratedSecurity { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class DTOStatus
    {
        public string StatusMessage { get; set; }
        public bool Success { get; set; }
    }
}