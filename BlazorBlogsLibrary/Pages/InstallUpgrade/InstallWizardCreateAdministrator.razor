@using Microsoft.AspNetCore.Identity;
@using BlazorBlogs.Data;
@using BlazorBlogs.Data.Models;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject BlogsService _BlogsService

<h3>Install Wizard Create Administrator</h3>
@if (@ErrorMessage != "")
{
    <h4>@ErrorMessage</h4>
}
else
{

}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    // CreateAdministratorChanged is an EventCallback that will
    // notify the parent component CreateAdministrator Is complete
    [Parameter] public EventCallback<bool> CreateAdministratorChanged { get; set; }

    string ErrorMessage = "";
    string ADMINISTRATION_ROLE = "Administrators";
    string strAdministratorUserName = "";
    string strAdministratorPassword = "";

    protected override async Task OnInitializedAsync()
    {
        // Don't allow this to be used if an Administrator already exists
        var AdminExists = await _BlogsService.AdminExistsAsync();

        if (AdminExists)
        {
            // Notify parent component
            await CreateAdministratorChanged.InvokeAsync(true);
        }
    }

    #region private async void CreateAdministrator()
    private async void CreateAdministrator()
    {
        try
        {
            // ensure there is a ADMINISTRATION_ROLE
            var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
            if (RoleResult == null)
            {
                // Create ADMINISTRATION_ROLE Role
                await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
            }

            // Create the user
            ApplicationUser objApplicationUser = new ApplicationUser();
            objApplicationUser.UserName = strAdministratorUserName;
            objApplicationUser.DisplayName = strAdministratorUserName;
            objApplicationUser.Email = strAdministratorUserName;
            objApplicationUser.EmailConfirmed = true;

            var UserResult = await _UserManager.CreateAsync(objApplicationUser, strAdministratorPassword);

            var user = await _UserManager.FindByNameAsync(strAdministratorUserName);

            if (user != null)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }

            // Notify parent component
            await CreateAdministratorChanged.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            StateHasChanged();
            return;
        }
    }
    #endregion
}
