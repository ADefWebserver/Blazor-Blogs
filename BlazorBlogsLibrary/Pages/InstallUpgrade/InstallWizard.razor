@layout InstallWizardLayout
@page "/installwizard/{WizardMode}"
@using System.Security.Claims;
@inject InstallUpdateState InstallUpdateState
@inject NavigationManager NavigationManager

<h3>@WizardMode Wizard</h3>
<br />

@if (WizardStage == "DatabaseConfiguration")
{
    <InstallWizardDatabaseConfiguration />
}

@if (WizardMode == "UPGRADE")
{
    @if (WizardStage == "VerifyAdministrator")
    {
        <InstallWizardLoginAdministrator />
    }

    @if (WizardStage == "RunScripts")
    {
        <InstallWizardExecuteScripts />
    }

    @if (WizardStage == "RunScriptsComplete")
    {
        <button type="button" class="btn btn-primary" @onclick="Continue">[Click Here To Continue]</button>
    }
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public string WizardMode { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    public string WizardStage = "";
    protected override async Task OnInitializedAsync()
    {
        //await Task.FromResult(

        // Get current user
        CurrentUser = (await authenticationStateTask).User;

        if (WizardMode == "INSTALL")
        {
            WizardStage = "DatabaseConfiguration";
        }

        if (WizardMode == "UPGRADE")
        {
            if (!CurrentUser.IsInRole(ADMINISTRATION_ROLE))
            {
                WizardStage = "VerifyAdministrator";
            }
            else
            {
                WizardStage = "RunScripts";
            }
        }
    }

    void Continue()
    {
        string url = NavigationManager.ToAbsoluteUri($"/").AbsoluteUri;
        NavigationManager.NavigateTo(url);
    }
}
